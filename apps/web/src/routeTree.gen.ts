/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as userLayoutImport } from './routes/(user)/_layout'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as userLayoutSettingImport } from './routes/(user)/_layout/setting'
import { Route as userLayoutMeImport } from './routes/(user)/_layout/me'
import { Route as userLayoutInfoYearmonthImport } from './routes/(user)/_layout/info.$yearmonth'

// Create Virtual Routes

const userImport = createFileRoute('/(user)')()
const authImport = createFileRoute('/(auth)')()
const authAuthSignupLazyImport = createFileRoute('/(auth)/_auth/signup')()
const authAuthLoginLazyImport = createFileRoute('/(auth)/_auth/login')()

// Create/Update Routes

const userRoute = userImport.update({
  id: '/(user)',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const userLayoutRoute = userLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => userRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const authAuthSignupLazyRoute = authAuthSignupLazyImport
  .update({
    id: '/signup',
    path: '/signup',
    getParentRoute: () => authAuthRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/_auth.signup.lazy').then((d) => d.Route))

const authAuthLoginLazyRoute = authAuthLoginLazyImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => authAuthRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/_auth.login.lazy').then((d) => d.Route))

const userLayoutSettingRoute = userLayoutSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => userLayoutRoute,
} as any)

const userLayoutMeRoute = userLayoutMeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => userLayoutRoute,
} as any)

const userLayoutInfoYearmonthRoute = userLayoutInfoYearmonthImport.update({
  id: '/info/$yearmonth',
  path: '/info/$yearmonth',
  getParentRoute: () => userLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userImport
      parentRoute: typeof rootRoute
    }
    '/(user)/_layout': {
      id: '/(user)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userLayoutImport
      parentRoute: typeof userRoute
    }
    '/(user)/_layout/me': {
      id: '/(user)/_layout/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof userLayoutMeImport
      parentRoute: typeof userLayoutImport
    }
    '/(user)/_layout/setting': {
      id: '/(user)/_layout/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof userLayoutSettingImport
      parentRoute: typeof userLayoutImport
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginLazyImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/signup': {
      id: '/(auth)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authAuthSignupLazyImport
      parentRoute: typeof authAuthImport
    }
    '/(user)/_layout/info/$yearmonth': {
      id: '/(user)/_layout/info/$yearmonth'
      path: '/info/$yearmonth'
      fullPath: '/info/$yearmonth'
      preLoaderRoute: typeof userLayoutInfoYearmonthImport
      parentRoute: typeof userLayoutImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthLoginLazyRoute: typeof authAuthLoginLazyRoute
  authAuthSignupLazyRoute: typeof authAuthSignupLazyRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginLazyRoute: authAuthLoginLazyRoute,
  authAuthSignupLazyRoute: authAuthSignupLazyRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface userLayoutRouteChildren {
  userLayoutMeRoute: typeof userLayoutMeRoute
  userLayoutSettingRoute: typeof userLayoutSettingRoute
  userLayoutInfoYearmonthRoute: typeof userLayoutInfoYearmonthRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userLayoutMeRoute: userLayoutMeRoute,
  userLayoutSettingRoute: userLayoutSettingRoute,
  userLayoutInfoYearmonthRoute: userLayoutInfoYearmonthRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface userRouteChildren {
  userLayoutRoute: typeof userLayoutRouteWithChildren
}

const userRouteChildren: userRouteChildren = {
  userLayoutRoute: userLayoutRouteWithChildren,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof userLayoutRouteWithChildren
  '/me': typeof userLayoutMeRoute
  '/setting': typeof userLayoutSettingRoute
  '/login': typeof authAuthLoginLazyRoute
  '/signup': typeof authAuthSignupLazyRoute
  '/info/$yearmonth': typeof userLayoutInfoYearmonthRoute
}

export interface FileRoutesByTo {
  '/': typeof userLayoutRouteWithChildren
  '/me': typeof userLayoutMeRoute
  '/setting': typeof userLayoutSettingRoute
  '/login': typeof authAuthLoginLazyRoute
  '/signup': typeof authAuthSignupLazyRoute
  '/info/$yearmonth': typeof userLayoutInfoYearmonthRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(user)': typeof userRouteWithChildren
  '/(user)/_layout': typeof userLayoutRouteWithChildren
  '/(user)/_layout/me': typeof userLayoutMeRoute
  '/(user)/_layout/setting': typeof userLayoutSettingRoute
  '/(auth)/_auth/login': typeof authAuthLoginLazyRoute
  '/(auth)/_auth/signup': typeof authAuthSignupLazyRoute
  '/(user)/_layout/info/$yearmonth': typeof userLayoutInfoYearmonthRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/me'
    | '/setting'
    | '/login'
    | '/signup'
    | '/info/$yearmonth'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/me' | '/setting' | '/login' | '/signup' | '/info/$yearmonth'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(user)'
    | '/(user)/_layout'
    | '/(user)/_layout/me'
    | '/(user)/_layout/setting'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/signup'
    | '/(user)/_layout/info/$yearmonth'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRoute: typeof authRouteWithChildren
  userRoute: typeof userRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
  userRoute: userRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(user)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/signup"
      ]
    },
    "/(user)": {
      "filePath": "(user)",
      "children": [
        "/(user)/_layout"
      ]
    },
    "/(user)/_layout": {
      "filePath": "(user)/_layout.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/_layout/me",
        "/(user)/_layout/setting",
        "/(user)/_layout/info/$yearmonth"
      ]
    },
    "/(user)/_layout/me": {
      "filePath": "(user)/_layout/me.tsx",
      "parent": "/(user)/_layout"
    },
    "/(user)/_layout/setting": {
      "filePath": "(user)/_layout/setting.tsx",
      "parent": "/(user)/_layout"
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth.login.lazy.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/signup": {
      "filePath": "(auth)/_auth.signup.lazy.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(user)/_layout/info/$yearmonth": {
      "filePath": "(user)/_layout/info.$yearmonth.tsx",
      "parent": "/(user)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
